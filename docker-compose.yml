# DCRP - Docker Container Reverse Proxy
# Complete orchestration for all services

services:
  # Caddy Reverse Proxy with Cloudflare DNS + Let's Encrypt
  caddy:
    build: ./caddy
    container_name: dcrp-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"  # Admin API port
    command: ["caddy", "run", "--config", "/etc/caddy/Caddyfile", "--adapter", "caddyfile", "--resume=false"]
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - dcrp-network
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL}
      - DOMAIN=${DOMAIN}
      - DEBUG=true
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "dcrp.service=caddy"
      - "dcrp.description=Reverse proxy with Cloudflare DNS + Let's Encrypt"

  # API Server for route management
  api-server:
    build: ./api-server
    container_name: dcrp-api-server
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CADDY_ADMIN_URL=http://caddy:2019
      - CADDY_SERVER=srv0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DNS_RESOLVER=192.168.86.76:53
      - CONFIG_PATH=/config
    volumes:
      - ./config:/config
      - api_logs:/var/log/dcrp
      - caddy_logs:/var/log/caddy:ro
    networks:
      - dcrp-network
    depends_on:
      caddy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "dcrp.service=api-server"
      - "dcrp.description=FastAPI service for route management"

  # Web UI for administration
  web-ui:
    build: ./web-ui
    container_name: dcrp-web-ui
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - API_BASE_URL=http://api-server:8000
      - WEB_HOST=0.0.0.0
      - WEB_PORT=5000
      - SECRET_KEY=${SECRET_KEY:-dcrp-default-secret-change-in-production}
      - DEBUG=false
    volumes:
      - web_logs:/var/log/dcrp
    networks:
      - dcrp-network
    depends_on:
      api-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "dcrp.service=web-ui"
      - "dcrp.description=Flask web interface for route administration"

  # Docker Monitor Service (for auto-discovery)
  docker-monitor:
    build: ./docker-monitor
    container_name: dcrp-docker-monitor
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://api-server:8000
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MONITOR_INTERVAL=30
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./config:/app/config:ro
      - ./ssh-keys:/app/ssh-keys:ro
      - monitor_logs:/var/log/dcrp
    networks:
      - dcrp-network
    depends_on:
      api-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://api-server:8000/health')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "dcrp.service=docker-monitor"
      - "dcrp.description=Container auto-discovery and route management"

  # SSH Manager Service (for multi-host support)
  ssh-manager:
    build: ./ssh-manager
    container_name: dcrp-ssh-manager
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://api-server:8000
      - SSH_KEY_PATH=/app/ssh-keys/id_rsa
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - ./ssh-keys:/app/ssh-keys:ro
      - ssh_logs:/var/log/dcrp
    networks:
      - dcrp-network
    depends_on:
      api-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "print('SSH Manager is running')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "dcrp.service=ssh-manager"
      - "dcrp.description=SSH host management for multi-host deployments"

  # UI Test Agent (for automated UI/UX testing)
  ui-test-agent:
    build: ./ui-test-agent
    container_name: dcrp-ui-test-agent
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - WEB_UI_URL=http://web-ui:5000
      - API_SERVER_URL=http://api-server:8000
      - LOG_LEVEL=INFO
    volumes:
      - ui_test_results:/app/test-results
      - ui_test_screenshots:/app/test-results/screenshots
      - ui_test_reports:/app/test-results/reports
    networks:
      - dcrp-network
    depends_on:
      web-ui:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "dcrp.service=ui-test-agent"
      - "dcrp.description=Automated UI/UX testing using Playwright MCP"

networks:
  dcrp-network:
    driver: bridge
    name: dcrp-network
    labels:
      - "dcrp.network=main"

volumes:
  # Caddy data persistence
  caddy_data:
    name: dcrp-caddy-data
    labels:
      - "dcrp.volume=caddy-data"
  caddy_config:
    name: dcrp-caddy-config
    labels:
      - "dcrp.volume=caddy-config"
  
  # Log volumes for each service
  caddy_logs:
    name: dcrp-caddy-logs
    labels:
      - "dcrp.volume=caddy-logs"
  api_logs:
    name: dcrp-api-logs
    labels:
      - "dcrp.volume=api-logs"
  web_logs:
    name: dcrp-web-logs
    labels:
      - "dcrp.volume=web-logs"
  monitor_logs:
    name: dcrp-monitor-logs
    labels:
      - "dcrp.volume=monitor-logs"
  ssh_logs:
    name: dcrp-ssh-logs
    labels:
      - "dcrp.volume=ssh-logs"
  ui_test_results:
    name: dcrp-ui-test-results
    labels:
      - "dcrp.volume=ui-test-results"
  ui_test_screenshots:
    name: dcrp-ui-test-screenshots
    labels:
      - "dcrp.volume=ui-test-screenshots"
  ui_test_reports:
    name: dcrp-ui-test-reports
    labels:
      - "dcrp.volume=ui-test-reports"